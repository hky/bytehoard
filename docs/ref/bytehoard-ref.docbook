<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN">
 
<book id="bytehoard21-ref" lang="en">
 
<bookinfo>
<title>ByteHoard 2.1 Developer Reference</title>

<authorgroup>
<author>
<firstname>Andrew</firstname>
<surname>Godwin</surname>
<email>andrew@bytehoard.org</email>
</author>
</authorgroup>

<date>18th June 2005/date>
<releaseinfo>0.2</releaseinfo>

<abstract>
<para>
A guide to the internal naming, functions and design of ByteHoard.
</para>
</abstract>

<copyright>
<holder>Andrew Godwin</holder>
<year>2005</year>
</copyright>


</bookinfo>
<author role="ByteHoard Creator">Andrew Godwin</author>
 


	<chapter id="introduction">
	<title>Introduction</title>
	
	<para>This document is a reference about anything relevant in the ByteHoard code. It's designed to save you hours of trawling through the code to see what stuff does and what parameters to give things, and will hopefully make whatever you're trying to do easier.
	
	</para><para>

	It is nowhere near finished - bear in mind this is done by me alone - but I hope it's useful, even as an alternative to nothing. I haven't spent an extraordinary amount of time on it, but I do try and keep it up to date, if only for my own sake.
	
	</para><para>

	ByteHoard is a wonderfully chaotic piece of code. There is some sort of order; indeed, there is far more than in previous versions. Everything is arranged in a somewhat logical, if not fine-grained, directory structure. All major functions are in includes, layouts are in layouts, modules are in modules, and so on. Everything is extremely modularised, but hopefully not too much.

	</para>
	
	</chapter>
	
	
	
	
	<chapter id="dbstruct">
	<title>Database Structure</title>
	
	
	<sect1 id="dbstruct_intro">
	<title>Introduction to ByteHoard & Databases</title>
	
	<para>You must bear in mind that, in the world of ByteHoard and the strange database abstraction layer, database structure really only consists of the field and table names. Data types do not really come into account; we could store everything in TEXT-type fields if we wanted, since that's the way some 'databases' will work with ByteHoard (the flatfile database is an example).</para>
	
	<para>This means that the structure is designed for the easiest way of retrieving data using only WHERE clauses. It may seem unefficient and kludged, but it's worked for ages.</para>
	
	</sect1>
	
	
	<sect1 id="dbstruct_commonnames">
	<title>Common Field Names</title>
	
	<para>The same field names are used all over the place, for simplicity. Here's a reference of them.</para>
	
	<itemizedlist>
	<listitem><para><parameter>filepath</parameter> - A bytehoard-style filepath. See <link linkend="concepts_filepath">Concepts - Filepath</link>.</para></listitem>
	<listitem><para><parameter>filetype</parameter> - The file's extension.</para></listitem>
	<listitem><para><parameter>username</parameter> - A username. Duh.</para></listitem>
	<listitem><para><parameter>password</parameter> - A (MD5ed) password.</para></listitem>
	<listitem><para><parameter>group</parameter> - A group name.</para></listitem>
	<listitem><para><parameter>status</parameter> - The status of the other fields linked together. Used in ACLs, module lists.</para></listitem>
	</itemizedlist>
	
	</sect1>
	
	
	<sect1 id="dbstruct_tables">
	<title>Tables & Descriptions</title>
	
	<sect2 id="dbstruct_tables_intro">
	<title>Introduction</title>
	<para>There are quite a few tables for bytehoard, and they seem to be increasing every day. Here's a rundown of them.</para>
	<para>Remember these names are without prefixes - they will probably have bh2_ or something else in front of them in the database.</para>
	</sect2>
	
	<sect2 id="dbstruct_tables_tables">
	<title>Tables</title>
	
		<sect3 id="dbstruct_tables_tables_aclgroups">
		<title>aclgroups</title>
		<para>This table contains the permissions of a <parameter>group</parameter> for a <parameter>filepath</parameter>. <parameter>Status</parameter> is the permission. 1 is read, 2 is write, 3 is owner. 0 is obviously nothing.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_aclpublic">
		<title>aclpublic</title>
		<para>This table contains the permissions of the public (anonymous/guest users) for a <parameter>filepath</parameter>. <parameter>Status</parameter> is the permission. 1 is read, 2 is write, 3 is owner. 0 is obviously nothing.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_aclusers">
		<title>aclusers</title>
		<para>This table contains the permissions of a <parameter>username</parameter> for a <parameter>filepath</parameter>. <parameter>Status</parameter> is the permission. 1 is read, 2 is write, 3 is owner. 0 is obviously nothing.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_adminmodulesmenu">
		<title>adminmodulesmenu</title>
		<para>This contains the list of modules for the admin centre. Compare with modulesmenu.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_bandwidth">
		<title>bandwidth</title>
		<para>This contains bandwidth entries, for the new bandwidth tracking system. Each row represents one event. <parameter>username</parameter> is the username of the user who did it, <parameter>time</parameter> is the UNIX timestamp of when it occurred, <parameter>type</parameter> is upload/download ('up'/'down') and <parameter>bytes</parameter> is the number of bytes transferred.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_config">
		<title>config</title>
		<para>This contains rows of configuration values. The <parameter>variable</parameter> field specifies the name of the variable that the <parameter>value</parameter> will be loaded into. They end up as <programlisting>$bhconfig['variable'] = value</programlisting>
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_filecodes">
		<title>filecodes</title>
		<para>This table has the links between those filecodes and the filepaths. <parameter>filecode</parameter> is the filecode that gets passed in the URL. <parameter>filepath</parameter> is the path of the file that the code links to. <parameter>expires</parameter> is the timestamp when the link expires.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_groupusers">
		<title>groupusers</title>
		<para>This table links user with groups. An entry normally means membership. Status isn't really used yet, but should refer to the position of the user in the group (moderator, user, peon, etc.).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_logactions">
		<title>logactions</title>
		<para>This table specifies what should be done when an action or error is logged. <parameter>Type</parameter> is the internal name for the type of action (i.e. BH_LOGIN or BH_WRONG_FILE). <parameter>Action</parameter> is the name for the internal action to use (onscreen, file, email etc.) and <parameter>parameters</parameter> are the extra parameters the action might need (email address, for example). For more details on this see the logging system section.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_metadata">
		<title>metadata</title>
		<para>This contains metadata entries for <parameter>filepath</parameter>s. <parameter>Metaname</parameter> is the name of the property (e.g. size, description) and <parameter>Metavalue</parameter> is the value (this is sort of like the <link linkend="dbstruct_tables_tables_config">config table</link>).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_modules">
		<title>modules</title>
		<para>This contains the module information. <parameter>Module</parameter> is the ID of the module (the filename without .inc.php), <parameter>file</parameter> is the filename, and <parameter>name</parameter>, <parameter>description</parameter>, and <parameter>author</parameter> are the obvious details of the file.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_modulesaccesslevel">
		<title>modulesaccesslevel</title>
		<para>This table links the access levels that user have on files with the modules that are displayed. The module and accesslevel are specified, along with whether the module should be displayed for that access level. Examples: The download module works for access levels 1, 2 and 3, while the delete one only works for 2 and 3.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_modulesdirectory">
		<title>modulesdirectory</title>
		<para>This table lists the modules displayed as actions for directories. <parameter>module</parameter> is the module and <parameter>status</parameter> should be set to 1 for the rule to be used.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_modulesfiletype">
		<title>modulesfiletype</title>
		<para>This table links the modules with their filetypes - the value '*' for the <parameter>filetype</parameter> field means for all files (for downloads, for example), while a file extension (like 'html') will only let the module work for that one type (e.g. for the HTML editor).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_modulesmenu">
		<title>modulesmenu</title>
		<para>This table links the modules with 'menus' - the only main one is 'page', which is the list of accessible pages viewable in the toolbar, like logout and options. Again, status is 1 for display and 0 to not show.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_modulesusertype">
		<title>modulesusertype</title>
		<para>This table links the modules displayed to the user types thay are displayed for. 'guest', 'normal' and 'admin' are the three main usertypes, and you can show modules based on which usertype is viewing the page. Examples include the login page only being shown in the toolbar for guests, and logout only being sown for users and admins.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_packages">
		<title>packages</title>
		<para>This table contains the details of all packages installed in this version of ByteHoard. <parameter>code</parameter> is the ID/code of the package (unique), <parameter>name</parameter> is its actual name, with spaces, apostrophes etc., <parameter>description</parameter> is its description, <parameter>version</parameter> is the version installed and <parameter>type</parameter> is the type of package (BH update, language, skin, layout, mod, etc.).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_passwordresets">
		<title>passwordresets</title>
		<para>This table contains password reset requests. <parameter>username</parameter> is the username of the reset request, <parameter>resetid</parameter> is the reset code which gets passed in the URL, <parameter>time</parameter> is when the request was created (used to expire them after a certain time period).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_registrations">
		<title>registrations</title>
		<para>This table contains registration requests. <parameter>regid</parameter> is the id of the request (used for confirmation link), <parameter>status</parameter> is the status of the request (0 = pending confirmation, 1 = pending moderation), <parameter>regtime</parameter> is the time when the requst was created (used to expire them).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_texts">
		<title>texts</title>
		<para>This table contains the texts, such as the FAQ and welcome message, for the site. <parameter>Textname</parameter> is the ID/name of the text and <parameter>textbody</parameter> is the content of the text (normally HTML).
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_uploads">
		<title>uploads</title>
		<para>Contains entries for the uploads to let the popups work right. <parameter>sessionid</parameter> is the... sessionid and <parameter>status</parameter> is a textual status string.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_userinfo">
		<title>userinfo</title>
		<para>This table is like the metadata table for users - it can contain things like full names, email addresses or even telephone numbers or the like. <parameter>Username</parameter> ties the records to a certain user and the <parameter>itemname</parameter> and <parameter>itemcontent</parameter> variables are just like the metaname and metainfo variables in the <link linkend="dbstruct_tables_tables_metadata">metadata table</link>.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_users">
		<title>users</title>
		<para>The main users table. Contains <parameter>username</parameter>s, MD5 hashed <parameter>password</parameter>s, and the user <parameter>type</parameter>.
		</para>
		</sect3>
	
		<sect3 id="dbstruct_tables_tables_usersviews">
		<title>usersviews</title>
		<para>Links <parameter>username</parameter>'s <parameter>view</parameter> s for <parameter>filepath</parameter> s.
		</para>
		</sect3>
	
	</sect2>
	
	</sect1>
	
	
	
	</chapter>
	
	
	
	
	<chapter id="concepts">
	<title>ByteHoard Concepts</title>
	
	<sect1 id="concepts_intro">
	<title>Introduction to ByteHoard Concepts</title>
	
	<para>This section is about the concepts behind ByteHoard - my original line of thinking, if you will. Hopefully it will help you to understand they way some things work.</para>
	
	</sect1>
	
	
	<sect1 id="concepts_filepath">
	<title>The filepath</title>
	
	<para>The filepath is arguably the most important part. It's the unique identifier for each file, and is what everything uses when referring to files.</para>
	
	<para>The format is very similar to that of *nix-style paths; the root directory is the file storage directory for the installed system and it's just directories and a filename at the end after that. Nothing special, really.</para>
	
	<para>
	<example>
	<title>An example filepath</title>
	<programlisting>/andrew/pictures/pic1.jpg</programlisting>
	</example>
	</para>
	
	<para>The filepath is case-insensitive; when they're processed, they're reduced to lowercase and all extra slashes are trimmed out, and ones are added in the correct places if needed. Also note that using . or .. is not supported. It may get the right file, but it will confuse the ACL and file tables.</para>
	
	</sect1>
	
	
	
	<sect1 id="concepts_modules">
	<title>Modularity</title>
	
	<para>If you look at the ByteHoard code, you should notice one very important thing; everything is modularised. This is important, and shouldn't be too unfamiliar to many developers, but I'd just like to explain the details.</para>
	
	<para>The modules are not grouped in any particular way; they are simply PHP files in the modules/ directory. When a new one is found, ByteHoard reads its name, description and author into the database, but where they are linked to and for whom is all specified in the database.
	
	<note>What they were used for and by whom used to be specified in the files themselves, but i decided that a database-based approach would be much better and more flexible, even if it does require a bit more work in the code when adding or removing modules.</note>
	
	</para>
	
	<para>Even the core functions themself are modules - when a page is loaded, the index.php file simple loads the BH libraries, checks the current user is allowed to access the page (and perhaps does a login/logout), and then hands complete control over to the module. This allows for a lot of power - modules can do whatever they want. You could even install a CMS or a wiki in the modules directory, make the appropriate change of main file names (or use an include) and ByteHoard would quite happily pass control to it, and it would output correctly. Modules can use the layout & templates at their own discretion; it would be silly not to, but it might be necessary, and in the case of the download and filelink modules, the module only wants to spit out the file and then exit.</para>
	
	</sect1>
	
	
	
	<sect1 id="concepts_layouts">
	<title>Layouts</title>
	
	<sect2 id="concepts_layouts_separation">
	<title>Separation</title>
	<para>In this version of ByteHoard I'm introducing complete separation of the layout and actual processing. The modules simply call the layout class, pass it a few parameters (type of page, title, content) and then call its display() function. What the layout does is completely separate; the default one obviously displays the stuff in the relevant places, as well as showing any error messages that have appeared in the $bh_errors global variable, but it could simply show the files for a directory listing, just output plain text, or do things like change the backgrounds baedon the action or even the file types.</para>
	</sect2>
	
	<sect2 id="concepts_layouts_skins">
	<title>Skins</title>
	<para>Of course, this introduced the problem of what skin designers were to do; with just this in place, making a new skin would invlove an understanding of PHP. So, in this vein, there is also a skinning system. This allows the images for the layout to be swapped around - the layout of the... layout doesn't change, but the images do. This means that anyone with a graphics editor can create a skin, somewhat akin to the old winamp 2.x skins, although with lots of pictures rather than one.</para>
	</sect2>
	
	<sect2 id="concepts_layouts_further">
	<title>Further Examples & Explanation</title>
	<para>The default layout is a good example of all the above mentioned ideas - the skins, where you can change the borders of the toolbar and the boxes, the separation, and everything else. Have a look at the code if you're interested; it uses includes to keep the code smaller and more manageable, so the major page sections are in separate files (and easy to edit and understand for someone with HTM knowledge).</para>
	</sect2>
	
	</sect1>
	
	
	
	<sect1 id="concepts_logging">
	<title>The logging system</title>
	
	<para>The logging system is designed so that each event has one or more actions associated with it. The bh_log function, which is called by the script whenever something important happens, looks in the logactions table to decide what to do with each event. A log call can result in one or more of an onscreen event, a log entry in a file or the database, and an email to a specified address. This means the logging system is also used to display all on screen notifications (such as 'file upload successful' or 'file deleted') as well as logging these acitons ('user andrew deleted /andrew/test.txt').</para>
	
	<sect2 id="concepts_logging_standard">
	<title>Standard Events</title>
	<para>These are used in many places throughout the script, and serve as ways for generic logging, or as is mostly the case, on screen notifications.</para>
	
	<sect3 id="concepts_logging_standard_bh_notice">
	<title>bh_notice</title>
	<para>This shows an onscreen notification with the 'notice' or 'info' style (by default a blue i). Should be used for expected actions that have occurred as expected. Examples: 'Upload succeeded' or 'Now logged in as andrew'.</para>
	</sect3>
	
	<sect3 id="concepts_logging_standard_bh_warning">
	<title>bh_warning / bh_onscreen</title>
	<para>This shows an onscreen notification with the 'warning' style (by default a yellow triangle with an exclamation mark). Should be used for unexpected events or important things the user might not know about. This is also the default type. Examples: 'Login failed' or 'You're running out of disk space'.</para>
	</sect3>
	
	<sect3 id="concepts_logging_standard_bh_error">
	<title>bh_error</title>
	<para>This shows an onscreen notification with the 'error' style (by default a white cross on a red circle). Should be used for errors and other unexpected events with bad consequences. Examples: 'Upload failed' or 'Access Denied'.</para>
	</sect3>
	
	</sect2>
	
	</sect1>
	
	
	<sect1 id="concepts_i18n">
	<title>The Language Files & Internationalisation</title>
	
	<para>Back in the days of ByteHoard 0.8, someone asked me if it was possible to translate it into different languages. At the time, all the messages were hardcoded into the script, but since then I've used the tried-and-true method of language includes.</para>
	
	<para>These are simply PHP files with a list of lines like so:
	
	<example id="concepts_i18n_eg_langline">
	<title>An example of a language include line</title>
	<programlisting>$bhlang['explain:login'] = "Please enter your username and password to login to the system.";</programlisting>
	</example>
	
	The structure of these lines is simply assigning the language string to a value in the array. The key of the array entry is the reference of the string (in this case explain:login, or an explanation of the login), and the value is obviously the string. This way, we can call it in the script like so:
	
	<example id="concepts_i18n_eg_langinscript">
	<title>An example of a language call in a template</title>
	<programlisting>$str .= "<td>".$bhlang['explain:login']."</td>";</programlisting>
	</example>
	
	This makes the template have the correct explanation in the right place.
	
	</para>
	
	<sect2 id="concepts_i18n_edit">
	<title>Creating or Editing Language Files</title>
	
	<para>To create your own language file or edit an existing language file isn't really that hard. If you're creating, simply copy the en.lang.php file to another with the correct ISO 639 prefix, or with a different (longer) prefix if it's not really an official language.</para>
	
	<para>Then just go down the file and edit the values in the speech marks on the right hand side to what thay should say in the new language (don't change anything to the left of the equals signs). If you use speech marks within your translated text, then please escape them like so: <programlisting>\"</programlisting> This ensures that they don't tell the PHP interpreter to stop reading there, thinking it's the end of the text.</para>
	
	<para>Some entries may contain things like #FILE#, #USER# or similar. These are markers that will be replaced by the filename or username respectively; for example:
	
	<example id="concepts_i18n_edit_eg_hash">
	<title>How #USER# is handled</title>
	<programlisting>"You are now logged in as #USER#. Welcome"
	
	If andrew logs in, then this is displayed as:
	
	"You are now logged in as andrew. Welcome"</programlisting>
	</example>
	
	</para>
	
	</sect2>
	
	</sect1>
	
	
	<sect1 id="concepts_folderviews">
	<title>Folder Views</title>
	
	<para>Back for ByteHoard 2.1 are multiple folder views. Currentely in the works are icon, tiles, thumbnails and list views.</para>
	
	<para>What happens is that when the folder viewer is called upon, it looks in the database to see if a user has a set view mode for that directory. If they don't, it looks for a global setting, If that doesn't exist, it looks at the contents and uses either tiles or thumbnails based on the directory contents (more thumbnailable files or less).</para>
	
	<para>The directory viewer then passes it off to the layout, which then uses the right view. If the layout doesn't have that view it can do whatever it likes; the suggestion is to default to tiles mode, but it depends on the template's design principles. If the layout is tailored towards things like PDAs or mobile phones, then it may want to use list mode or a special mode all the time, and ignore most view mode hints. However, for some special modes, such as the suggested HTML view mode for directories with index.html files in them, these special templates may have to abide by those. This aspect isn't yet finalised.</para>
	</para>
	
	</sect1>
	
	
	</chapter>
	
	<appendix id="appendix">
	<title>Appendix</title>
	
	<sect1>
	<title>Links & Locations</title>
	
	<para>
	<ulink url="http://bytehoard.org">ByteHoard.org</ulink> - The ByteHoard website
	</para>
	
	<para>
	<ulink url="http://php.net">PHP.net</ulink> - PHP, the framework ByteHoard is built on.
	</para>
	
	</sect1>
	
	</appendix>

</book>